from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from config.db import sqlite_conn
from utils.decorators import description, example, triggers, usage


@usage("/mj")
@example("/mj")
@triggers(["mj"])
@description("Return a random image generated by MidJourney.")
async def midjourney(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Return a random image generated by MidJourney."""
    cursor = sqlite_conn.cursor()
    cursor.execute(
        """
        SELECT * FROM midjourney_dataset ORDER BY RANDOM() LIMIT 1;
        """,
    )

    row = cursor.fetchone()
    if not row:
        await update.message.reply_text(
            f"No images found.",
            parse_mode=ParseMode.HTML,
        )
        return

    cleaned_prompt = (
        row["content_prompt"]
        .replace("**", "")
        .replace("<", "")
        .replace(">", "")
        .replace("@", "")
        .split(" ", 1)
    )

    text = f"""<i>{cleaned_prompt[1]}</i>\n\n{cleaned_prompt[0]}\n<b>({row["image_width"]} x {row["image_height"]})</b>"""
    await update.message.reply_photo(
        photo=row["content_url"], caption=text, parse_mode=ParseMode.HTML
    )
